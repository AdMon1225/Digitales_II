/* Generated by Yosys 0.9 (git sha1 1979e0b) */

(* src = "mux4x14bSynth.v:1" *)
module mux2x1Synth(clk, reset_L, selector, data_in0, data_in1, valid_0, valid_1, valid_out, data_out);
  (* src = "mux4x14bSynth.v:27" *)
  wire [1:0] _00_;
  (* src = "mux4x14bSynth.v:27" *)
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  (* src = "mux4x14bSynth.v:3" *)
  input clk;
  (* src = "mux4x14bSynth.v:6" *)
  input [1:0] data_in0;
  (* src = "mux4x14bSynth.v:7" *)
  input [1:0] data_in1;
  (* src = "mux4x14bSynth.v:10" *)
  output [1:0] data_out;
  (* src = "mux4x14bSynth.v:4" *)
  input reset_L;
  (* src = "mux4x14bSynth.v:5" *)
  input selector;
  (* src = "mux4x14bSynth.v:8" *)
  input valid_0;
  (* src = "mux4x14bSynth.v:8" *)
  input valid_1;
  (* src = "mux4x14bSynth.v:9" *)
  output valid_out;
  NAND _25_ (
    .A(reset_L),
    .B(_20_),
    .Y(_21_)
  );
  NOR _26_ (
    .A(_19_),
    .B(_21_),
    .Y(_00_[1])
  );
  NOR _27_ (
    .A(reset_L),
    .B(valid_out),
    .Y(_22_)
  );
  NAND _28_ (
    .A(reset_L),
    .B(_09_),
    .Y(_23_)
  );
  NOT _29_ (
    .A(_23_),
    .Y(_24_)
  );
  NOR _30_ (
    .A(_22_),
    .B(_24_),
    .Y(_01_)
  );
  NOT _31_ (
    .A(data_out[1]),
    .Y(_02_)
  );
  NOT _32_ (
    .A(valid_0),
    .Y(_03_)
  );
  NOT _33_ (
    .A(selector),
    .Y(_04_)
  );
  NOT _34_ (
    .A(data_out[0]),
    .Y(_05_)
  );
  NAND _35_ (
    .A(valid_1),
    .B(selector),
    .Y(_06_)
  );
  NOT _36_ (
    .A(_06_),
    .Y(_07_)
  );
  NOR _37_ (
    .A(_03_),
    .B(selector),
    .Y(_08_)
  );
  NOR _38_ (
    .A(_07_),
    .B(_08_),
    .Y(_09_)
  );
  NAND _39_ (
    .A(_04_),
    .B(data_in0[0]),
    .Y(_10_)
  );
  NAND _40_ (
    .A(selector),
    .B(data_in1[0]),
    .Y(_11_)
  );
  NAND _41_ (
    .A(_10_),
    .B(_11_),
    .Y(_12_)
  );
  NOR _42_ (
    .A(_09_),
    .B(_12_),
    .Y(_13_)
  );
  NAND _43_ (
    .A(_05_),
    .B(_09_),
    .Y(_14_)
  );
  NAND _44_ (
    .A(reset_L),
    .B(_14_),
    .Y(_15_)
  );
  NOR _45_ (
    .A(_13_),
    .B(_15_),
    .Y(_00_[0])
  );
  NAND _46_ (
    .A(_04_),
    .B(data_in0[1]),
    .Y(_16_)
  );
  NAND _47_ (
    .A(selector),
    .B(data_in1[1]),
    .Y(_17_)
  );
  NAND _48_ (
    .A(_16_),
    .B(_17_),
    .Y(_18_)
  );
  NOR _49_ (
    .A(_09_),
    .B(_18_),
    .Y(_19_)
  );
  NAND _50_ (
    .A(_02_),
    .B(_09_),
    .Y(_20_)
  );
  (* src = "mux4x14bSynth.v:27" *)
  DFF _51_ (
    .C(clk),
    .D(_01_),
    .Q(valid_out)
  );
  (* src = "mux4x14bSynth.v:27" *)
  DFF _52_ (
    .C(clk),
    .D(_00_[0]),
    .Q(data_out[0])
  );
  (* src = "mux4x14bSynth.v:27" *)
  DFF _53_ (
    .C(clk),
    .D(_00_[1]),
    .Q(data_out[1])
  );
endmodule

(* src = "mux4x14bSynth.v:45" *)
module mux2x1Synth4b(clk, reset_L, selector, data_in0, data_in1, valid_0, valid_1, valid_out, data_out);
  (* src = "mux4x14bSynth.v:47" *)
  input clk;
  (* src = "mux4x14bSynth.v:50" *)
  input [3:0] data_in0;
  (* src = "mux4x14bSynth.v:51" *)
  input [3:0] data_in1;
  (* src = "mux4x14bSynth.v:54" *)
  output [3:0] data_out;
  (* src = "mux4x14bSynth.v:48" *)
  input reset_L;
  (* src = "mux4x14bSynth.v:49" *)
  input selector;
  (* src = "mux4x14bSynth.v:56" *)
  (* unused_bits = "0" *)
  wire validX;
  (* src = "mux4x14bSynth.v:52" *)
  input valid_0;
  (* src = "mux4x14bSynth.v:52" *)
  input valid_1;
  (* src = "mux4x14bSynth.v:53" *)
  output valid_out;
  (* module_not_derived = 32'd1 *)
  (* src = "mux4x14bSynth.v:58" *)
  mux2x1Synth mux0 (
    .clk(clk),
    .data_in0(data_in0[3:2]),
    .data_in1(data_in1[3:2]),
    .data_out(data_out[3:2]),
    .reset_L(reset_L),
    .selector(selector),
    .valid_0(valid_0),
    .valid_1(valid_1),
    .valid_out(validX)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mux4x14bSynth.v:70" *)
  mux2x1Synth mux1 (
    .clk(clk),
    .data_in0(data_in0[1:0]),
    .data_in1(data_in1[1:0]),
    .data_out(data_out[1:0]),
    .reset_L(reset_L),
    .selector(selector),
    .valid_0(valid_0),
    .valid_1(valid_1),
    .valid_out(valid_out)
  );
endmodule

(* top =  1  *)
(* src = "mux4x14bSynth.v:84" *)
module mux4x14bSynth(clk, reset_L, selector, data_in0, data_in1, data_in2, data_in3, valid_0, valid_1, valid_2, valid_3, valid_out, data_out);
  (* src = "mux4x14bSynth.v:85" *)
  input clk;
  (* src = "mux4x14bSynth.v:88" *)
  input [3:0] data_in0;
  (* src = "mux4x14bSynth.v:88" *)
  input [3:0] data_in1;
  (* src = "mux4x14bSynth.v:88" *)
  input [3:0] data_in2;
  (* src = "mux4x14bSynth.v:88" *)
  input [3:0] data_in3;
  (* src = "mux4x14bSynth.v:91" *)
  output [3:0] data_out;
  (* src = "mux4x14bSynth.v:94" *)
  wire [3:0] data_out0;
  (* src = "mux4x14bSynth.v:94" *)
  wire [3:0] data_out1;
  (* src = "mux4x14bSynth.v:86" *)
  input reset_L;
  (* src = "mux4x14bSynth.v:87" *)
  input [1:0] selector;
  (* src = "mux4x14bSynth.v:89" *)
  input valid_0;
  (* src = "mux4x14bSynth.v:89" *)
  input valid_1;
  (* src = "mux4x14bSynth.v:89" *)
  input valid_2;
  (* src = "mux4x14bSynth.v:89" *)
  input valid_3;
  (* src = "mux4x14bSynth.v:90" *)
  output valid_out;
  (* src = "mux4x14bSynth.v:93" *)
  wire valid_out0;
  (* src = "mux4x14bSynth.v:93" *)
  wire valid_out1;
  (* module_not_derived = 32'd1 *)
  (* src = "mux4x14bSynth.v:96" *)
  mux2x1Synth4b mux0 (
    .clk(clk),
    .data_in0(data_in0),
    .data_in1(data_in1),
    .data_out(data_out0),
    .reset_L(reset_L),
    .selector(selector[1]),
    .valid_0(valid_0),
    .valid_1(valid_1),
    .valid_out(valid_out0)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mux4x14bSynth.v:109" *)
  mux2x1Synth4b mux1 (
    .clk(clk),
    .data_in0(data_in2),
    .data_in1(data_in3),
    .data_out(data_out1),
    .reset_L(reset_L),
    .selector(selector[1]),
    .valid_0(valid_2),
    .valid_1(valid_3),
    .valid_out(valid_out1)
  );
  (* module_not_derived = 32'd1 *)
  (* src = "mux4x14bSynth.v:122" *)
  mux2x1Synth4b mux2 (
    .clk(clk),
    .data_in0(data_out0),
    .data_in1(data_out1),
    .data_out(data_out),
    .reset_L(reset_L),
    .selector(selector[0]),
    .valid_0(valid_out0),
    .valid_1(valid_out1),
    .valid_out(valid_out)
  );
endmodule
